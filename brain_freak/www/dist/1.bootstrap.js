(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[1],{

/***/ "../pkg/brain_freak.js":
/*!*****************************!*\
  !*** ../pkg/brain_freak.js ***!
  \*****************************/
/*! exports provided: ProgramIterator, __wbindgen_object_drop_ref, __wbindgen_string_new, __wbg_log_c180b836187d3c94, __wbindgen_throw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ProgramIterator\", function() { return ProgramIterator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_object_drop_ref\", function() { return __wbindgen_object_drop_ref; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_string_new\", function() { return __wbindgen_string_new; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_log_c180b836187d3c94\", function() { return __wbg_log_c180b836187d3c94; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\n/* harmony import */ var _brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./brain_freak_bg.wasm */ \"../pkg/brain_freak_bg.wasm\");\n\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? __webpack_require__(/*! util */ \"./node_modules/util/util.js\").TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== _brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory0 = new Uint8Array(_brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? __webpack_require__(/*! util */ \"./node_modules/util/util.js\").TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== _brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetInt32Memory0 = new Int32Array(_brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n*/\nclass ProgramIterator {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ProgramIterator.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        _brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_programiterator_free\"](ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get program_counter() {\n        var ret = _brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_get_programiterator_program_counter\"](this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set program_counter(arg0) {\n        _brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_set_programiterator_program_counter\"](this.ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get the_pointer() {\n        var ret = _brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_get_programiterator_the_pointer\"](this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set the_pointer(arg0) {\n        _brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_set_programiterator_the_pointer\"](this.ptr, arg0);\n    }\n    /**\n    * @param {string} program\n    * @param {number} memory_size\n    * @param {number} output_capacity\n    * @param {Uint8Array} input\n    * @returns {ProgramIterator}\n    */\n    static new(program, memory_size, output_capacity, input) {\n        var ptr0 = passStringToWasm0(program, _brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"], _brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_realloc\"]);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(input, _brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"]);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = _brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"programiterator_new\"](ptr0, len0, memory_size, output_capacity, ptr1, len1);\n        return ProgramIterator.__wrap(ret);\n    }\n    /**\n    * @returns {string | undefined}\n    */\n    next() {\n        var ret = _brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"programiterator_next\"](this.ptr);\n        return ret === 0xFFFFFF ? undefined : String.fromCodePoint(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    get_output() {\n        _brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"programiterator_get_output\"](8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        _brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_input_len() {\n        var ret = _brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"programiterator_get_input_len\"](this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_output_len() {\n        var ret = _brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"programiterator_get_output_len\"](this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_memory_ptr() {\n        var ret = _brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"programiterator_get_memory_ptr\"](this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    get_input_ptr() {\n        var ret = _brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"programiterator_get_input_ptr\"](this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    get_output_ptr() {\n        var ret = _brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"programiterator_get_output_ptr\"](this.ptr);\n        return ret;\n    }\n    /**\n    */\n    bump_memory() {\n        _brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"programiterator_bump_memory\"](this.ptr);\n    }\n    /**\n    */\n    bump_output() {\n        _brain_freak_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"programiterator_bump_output\"](this.ptr);\n    }\n}\n\nconst __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nconst __wbindgen_string_new = function(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nconst __wbg_log_c180b836187d3c94 = function(arg0) {\n    console.log(getObject(arg0));\n};\n\nconst __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n\n\n//# sourceURL=webpack:///../pkg/brain_freak.js?");

/***/ }),

/***/ "../pkg/brain_freak_bg.wasm":
/*!**********************************!*\
  !*** ../pkg/brain_freak_bg.wasm ***!
  \**********************************/
/*! exports provided: memory, __wbg_programiterator_free, __wbg_get_programiterator_program_counter, __wbg_set_programiterator_program_counter, __wbg_get_programiterator_the_pointer, __wbg_set_programiterator_the_pointer, programiterator_new, programiterator_next, programiterator_get_output, programiterator_get_input_len, programiterator_get_output_len, programiterator_get_memory_ptr, programiterator_get_input_ptr, programiterator_get_output_ptr, programiterator_bump_memory, programiterator_bump_output, __wbindgen_malloc, __wbindgen_realloc, __wbindgen_free */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./brain_freak.js */ \"../pkg/brain_freak.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///../pkg/brain_freak_bg.wasm?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var brain_freak_brain_freak_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! brain_freak/brain_freak_bg */ \"../pkg/brain_freak_bg.wasm\");\n/* harmony import */ var brain_freak__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! brain_freak */ \"../pkg/brain_freak.js\");\n\n\n\n// {\"description\":\"\",\"input\":[],\"program\":\"[]\"}\n// {\"description\":\"\",\"input\":[],\"program\":\"[[.]..]\"}\n// {\"description\":\"add all inputs w/ spec length\",\"input\":[3,0,1,2],\"program\":\",[>,[->+<]<-]>>.\"}\n// {\"description\":\"outer loop block is never run\",\"input\":[0,0,1,2],\"program\":\",[>,[->+<]<-]>>.\"}\n// const defaultProgram = \",.>,.<[->+<]>.\";\n// const defaultProgram = \",.,.,.,.,.,.,.\";\nconst defaultProgram = \",.,.,.,.,.,.,.\";\nconst defaultInput = [1, 2, 3, 4, 5, 6, 7];\nlet description = localStorage.getItem(\"description\");\nconst programJson = localStorage.getItem(\"program\");\nlet program = programJson ? programJson : defaultProgram;\nconst inputJson = localStorage.getItem(\"input\");\n/** @type {number[]} */\nlet input = inputJson ? JSON.parse(inputJson) : defaultInput;\nconst memSize = 10;\nconst outputCapacity = 10;\n\nlet states = /** @type {State[]} */ ([]);\nlet stateIndex = 0;\nlet ticks = 0;\nlet lazyLoading = true;\nlet outputPointer = 0;\n/** @type {Uint8Array} */ let memory;\n/** @type {ProgramIterator} */ let iterator;\ninitialize();\nupdatePage(states[0]);\n\n/** @type {HTMLInputElement} */\nconst descriptionEl = (document.getElementById(\"descriptionEl\"));\ndescriptionEl.value = description ? description : \"\";\n/** @type {HTMLInputElement} */\nconst inputDataEl = (document.getElementById(\"inputDataEl\"));\ninputDataEl.value = input.join(\"\");\n/** @type {HTMLInputElement} */\nconst programInputEl = (document.getElementById(\"programInputEl\"));\nprogramInputEl.value = program;\n\nfunction initialize() {\n  iterator = brain_freak__WEBPACK_IMPORTED_MODULE_1__[\"ProgramIterator\"].new(\n    program,\n    memSize,\n    outputCapacity,\n    new Uint8Array(input)\n  );\n  let memPointer = iterator.get_memory_ptr();\n  memory = new Uint8Array(brain_freak_brain_freak_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer, memPointer, memSize);\n  let inputPointer = iterator.get_input_ptr();\n  outputPointer = iterator.get_output_ptr();\n\n  const inputLen = iterator.get_input_len();\n  const initialInput = [...(new Uint8Array(brain_freak_brain_freak_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer, inputPointer, inputLen))];\n  const initialState = {\n    command: \"\",\n    memory: Array.from(memory),\n    input: initialInput,\n    output: [],\n    thePointer: 0,\n    programCounter: 0,\n    ticks: 0\n  };\n  states = [initialState];\n  lazyLoading = true;\n  stateIndex = 0;\n}\n\nfunction loadRight() {\n  let state;\n  if (lazyLoading && stateIndex === states.length - 1) {\n    state = lazyLoadRight();\n    if (state) {\n      stateIndex++;\n      // console.log(1, \"lazy\", state.command);\n    } else {\n      lazyLoading = false;\n      // console.log(1, \"lazy done\", \"kept same state\");\n    }\n  }\n  else if (lazyLoading && stateIndex < states.length - 1) {\n    ++stateIndex;\n    state = states[stateIndex];\n    // console.log(2, \"pre\", state.command);\n  }\n  else if (stateIndex < states.length - 1) {\n    ++stateIndex;\n    state = states[stateIndex];\n    // console.log(3, \"pre\", state.command);\n  }\n  else if (!lazyLoading && stateIndex === states.length - 1) {\n    // console.log(4, \"done\");\n  }\n  else {\n    throw new Error(\"unexpected path\");\n  }\n  return state;\n}\n\n/** @returns {State | undefined} */\nfunction lazyLoadRight() {\n  const command = iterator.next();\n  if (!command) return undefined;\n\n  const inputPointer = iterator.get_input_ptr();\n  const inputLen = iterator.get_input_len();\n  const outputLen = iterator.get_output_len();\n  const input = [...(new Uint8Array(brain_freak_brain_freak_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer, inputPointer, inputLen))];\n  const output = [...(new Uint8Array(brain_freak_brain_freak_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer, outputPointer, outputLen))];\n  /** @type {State} */\n  const state = {\n    command,\n    memory: Array.from(memory),\n    input,\n    output,\n    thePointer: iterator.the_pointer,\n    programCounter: iterator.program_counter,\n    ticks: ++ticks\n  };\n  states.push(state);\n  return state;\n}\n\n/** @param {{key: string}} ev */\nwindow.onkeydown = ev => {\n  if (ev.key === \"ArrowLeft\") {\n    if (stateIndex === 0) return;\n    const state = states[--stateIndex];\n    updatePage(state);\n    // console.log(\"command:\", state.command);\n  }\n  else if (ev.key === \"ArrowRight\") {\n    const state = loadRight();\n    if (state) {\n      updatePage(state);\n    }\n  }\n  else if (ev.key === \"ArrowUp\") {\n    stateIndex = 0;\n    updatePage(states[stateIndex]);\n  }\n  else if (ev.key === \"ArrowDown\") {\n    while (loadRight()) { }\n    updatePage(states[states.length - 1]);\n  }\n};\n\nupdateButton.onclick = () => {\n  console.log(\"update\");\n  description = descriptionEl.value;\n  program = programInputEl.value;\n  input = inputDataEl.value.split(\"\").map(s => +s);\n  localStorage.setItem(\"description\", description);\n  localStorage.setItem(\"program\", program);\n  localStorage.setItem(\"input\", JSON.stringify(input));\n\n  initialize();\n  updatePage(states[0]);\n  //@ts-ignore\n  updateButton.focus();\n};\n\nresetButton.onclick = () => {\n  description = \"\";\n  input = defaultInput;\n  program = defaultProgram;\n\n  descriptionEl.value = \"\";\n  inputDataEl.value = input.join(\"\");\n  programInputEl.value = program;\n  localStorage.clear();\n  initialize();\n  updatePage(states[0]);\n};\n\nimportButton.onclick = () => {\n  const fullProgramJson = prompt(\"Input program json\");\n  if (fullProgramJson) {\n    /** @type { FullProgram } */\n    const fullProgram = JSON.parse(fullProgramJson);\n\n    description = fullProgram.description;\n    input = fullProgram.input;\n    program = fullProgram.program;\n\n    descriptionEl.value = description;\n    inputDataEl.value = input.join(\"\");\n    programInputEl.value = program;\n\n    localStorage.setItem(\"description\", description);\n    localStorage.setItem(\"program\", program);\n    localStorage.setItem(\"input\", JSON.stringify(input));\n\n    initialize();\n    updatePage(states[0]);\n  }\n};\n\nexportButton.onclick = () => {\n  const exportObj = { description, input, program };\n  const exportJson = JSON.stringify(exportObj);\n  const blob = new Blob([exportJson], { type: \"application/json\" }); //type\n  const downloadEl = document.createElement(\"a\");\n  const blobUrl = URL.createObjectURL(blob);\n  downloadEl.download = \"export\";\n  downloadEl.href = blobUrl;\n  downloadEl.click();\n};\n\ndebugButton.onclick = () => {\n  console.log(states);\n};\n\n/** @param {State} state */\nfunction updatePage(state) {\n  updateMemoryEl(state);\n  updateProgramEl(state);\n  updateInputEl(state);\n  updateOutputEl(state);\n\n  const ticksEl = document.getElementById(\"ticksEl\");\n  if (!ticksEl) throw new Error();\n  ticksEl.innerHTML = state.ticks.toString();\n}\n\n/** @param {State} state */\nfunction updateMemoryEl(state) {\n  const arrDisplay = state.memory.join(\", \");\n  const spaces = 1 + state.thePointer * 3;\n  const thePtrDisplay = \" \".repeat(spaces) + \"^\";\n  const display = `[${arrDisplay}]\\n${thePtrDisplay}`;\n\n  const memoryEl = document.getElementById(\"memoryEl\");\n  if (!memoryEl) throw new Error();\n  memoryEl.innerHTML = display;\n}\n\n/** @param {State} state */\nfunction updateProgramEl(state) {\n  const arrDisplay = Array.from(program).join(\" \");\n  const spaces = state.programCounter * 2;\n  const prgCounterDisplay = \" \".repeat(spaces) + \"^\";\n  const display = `${arrDisplay}\\n${prgCounterDisplay}`;\n\n  const programCodeEl = document.getElementById(\"programCodeEl\");\n  if (!programCodeEl) throw new Error();\n  programCodeEl.innerHTML = display;\n}\n\n/** @param {State} state */\nfunction updateInputEl(state) {\n  const arrDisplay = state.input.join(\", \");\n  const display = `[${arrDisplay}]`;\n\n  const inputEl = document.getElementById(\"inputEl\");\n  if (!inputEl) throw new Error();\n  inputEl.innerHTML = display;\n}\n\n/** @param {State} state */\nfunction updateOutputEl(state) {\n  const arrDisplay = state.output.join(\", \");\n  const display = `[${arrDisplay}]`;\n\n  const outputEl = document.getElementById(\"outputEl\");\n  if (!outputEl) throw new Error();\n  outputEl.innerHTML = display;\n}\n\n\n/**\n * @typedef {{\n * command: string;\n * memory: number[];\n * input: number[];\n * output: number[];\n * thePointer: number\n * programCounter: number\n * ticks: number\n * }} State\n */\n\n/** @typedef { { description: string, input: number[], program: string } } FullProgram */\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);